@using Archetype.Extensions
@using Archetype.Models
@using Umbraco.Core.Models
@using RJP.MultiUrlPicker.Models
@using USDA_ARS.Umbraco.Extensions.Models.Aris
@inherits Umbraco.Web.Mvc.UmbracoTemplatePage
@{
    Layout = "_Master.cshtml";

    IPublishedContent currentPage = Model.Content;

    IEnumerable<IPublishedContent> regionSiteList = USDA_ARS.Umbraco.Extensions.Helpers.Nodes.RegionSiteList();
    IEnumerable<IPublishedContent> allLocationsList = USDA_ARS.Umbraco.Extensions.Helpers.Nodes.AllLocationsList();
    ArchetypeModel locationMap = currentPage.GetPropertyValue<ArchetypeModel>("mapCoordinates");
    string countryMap = currentPage.GetPropertyValue<string>("countryMap", "/images/maps/usmap.jpg");
    countryMap = "/images/maps/usmap.jpg";
    List<string> alphaList = null;

    string listRegionContent = "";
    string bodyTextBottom = currentPage.GetPropertyValue<string>("bodyTextBelow");

    string slice = "";
    string query = "";
    string criteriaType = "";

    List<RefModeCode> locationList = null;

    if (false == string.IsNullOrEmpty(Request.QueryString["slice"]))
    {
        slice = Request.QueryString.Get("slice").Trim();
    }

    if (false == string.IsNullOrEmpty(Request.QueryString["query"]))
    {
        query = Request.QueryString.Get("query").Trim();
    }

    if (false == string.IsNullOrEmpty(Request.QueryString["criteriaType"]))
    {
        criteriaType = Request.QueryString.Get("criteriaType").Trim();
    }


    if (regionSiteList != null && regionSiteList.Any())
    {
        foreach (var region in regionSiteList)
        {
            if (false == region.GetPropertyValue<bool>("hideFromLocationsList"))
            {
                listRegionContent += "<a href=\"" + region.Url + "\">" + region.Name + "</a>\r\n";
                listRegionContent += " || ";
            }
        }

        if (true == listRegionContent.EndsWith(" || "))
        {
            listRegionContent = listRegionContent.Substring(0, listRegionContent.LastIndexOf(" || "));
        }

        bodyTextBottom = bodyTextBottom.Replace("{{LIST_REGIONS}}", listRegionContent);
    }

    if (false == string.IsNullOrWhiteSpace(query) && false == string.IsNullOrWhiteSpace(criteriaType))
    {
        locationList = USDA_ARS.Umbraco.Extensions.Helpers.Aris.SiteInfo.SearchLocation(query, criteriaType);
    }

    if (slice == "" || slice == "alpha")
    {
        alphaList = USDA_ARS.Umbraco.Extensions.Helpers.Aris.SiteInfo.GetAlphaList();

        if (slice == "alpha")
        {
            locationList = USDA_ARS.Umbraco.Extensions.Helpers.Aris.SiteInfo.SearchLocationByAlpha(query);
        }
    }

}

@Html.Partial("~/Views/Partials/Modules/NavigationLinksSub.cshtml", currentPage)

<div id="fullPage">

    @Html.Partial("~/Views/Partials/Modules/RelatedTopicsList.cshtml", currentPage)


    <div id="pageContent">

        @if (slice == "")
        {
            @Html.Raw(currentPage.GetPropertyValue<string>("bodyText"))

            <img src="@(countryMap)" border="0" usemap="#usmap" alt="map of areas">
            <map name="usmap">
                @if (locationMap != null && locationMap.Any())
                {
                    foreach (var mapCoord in locationMap)
                    {
                        Link navLink = mapCoord.GetValue<MultiUrls>("site").FirstOrDefault();

                        if (navLink != null)
                        {
                            IPublishedContent siteNode = Umbraco.TypedContent(navLink.Id ?? 0);

                            if (navLink != null)
                            {
                                string title = navLink.Name;
                                string coords = "";
                                string shape = "circle";

                                if (true == mapCoord.GetValue<bool>("isARegion"))
                                {
                                    shape = "rect";
                                    string coordString = mapCoord.GetValue<string>("coordinates");

                                    if (false == string.IsNullOrWhiteSpace(coordString) && coordString.IndexOf(",") >= 0)
                                    {
                                        List<int> coordArray = coordString.Split(',').Select(int.Parse).ToList();

                                        coords += (coordArray[0] - 40) + "," + (coordArray[1] - 10) + ",";
                                        coords += (coordArray[0] + 40) + "," + (coordArray[1] + 10);
                                    }
                                }
                                else
                                {
                                    if (siteNode != null)
                                    {
                                        if (siteNode.DocumentTypeAlias == "City")
                                        {
                                            IPublishedContent parentNode = siteNode.Parent;

                                            if (parentNode != null)
                                            {
                                                title = parentNode.Name + "&#013;" + siteNode.Name;
                                            }
                                        }
                                    }

                                    coords = mapCoord.GetValue<string>("coordinates") + ",5";
                                }
                                if (false == string.IsNullOrWhiteSpace(coords))
                                {
                                <area alt="@Html.Raw(title)" title="@Html.Raw(title)" href="@navLink.Url" coords="@coords" shape="@shape">
                                }
                            }
                        }
                    }
                }
            </map>

            <hr />

            @Html.Raw(bodyTextBottom)
        }

        @if (slice == "" || slice == "search")
        {
            <table>
                <form action="" method="get">
                    <input type="hidden" name="mt" value="places">
                    <input type="hidden" name="slice" value="search">

                    <tr><td align="right">Search for:</td><td><input type="text" name="query" value="@query"></td></tr>
                    <tr>
                        <td align="right">in:</td>
                        <td>
                            <select name="criteriaType">
                                <option value="title"><p>Location Title</p>
                                <option value="mission-statement"><p>Mission Statement</p>

                            </select>&nbsp;&nbsp;<input type="submit" value="Search">
                        </td>
                    </tr>
                </form>
            </table>
        }

        @if (slice == "search")
        {
            <hr size="1" noshade="">
            <p>Places matched:</p>

            if (locationList != null && locationList.Any())
            {
                foreach (RefModeCode location in locationList)
                {
                    string url = "javascript:alert('Location site not found.')";

                    IPublishedContent locationNode = USDA_ARS.Umbraco.Extensions.Helpers.Nodes.GetNodeByModeCode(location.ModeCode);

                    if (locationNode != null)
                    {
                        url = locationNode.Url;
                    }

                    <table span="p">
                        <tbody>
                            <tr>
                                <td valign="top"><img src="/images/incme/bullet.gif" border="0" alt="item"></td>
                                <td valign="top" align="left">
                                    <a href="@url" id="anch_51">@location.WebLabel</a>
                                </td>
                            </tr>
                        </tbody>
                    </table>
                }
            }
        }

        @if (slice == "" || slice == "alpha")
        {
            if (slice == "")
            {
                <hr />
                <p>Alternatively, browse for locations by clicking on a letter to see all locations starting with a specific letter:</p>
            }

            <p>
                &nbsp;
                @foreach (string letter in alphaList)
                {
                    if (query == letter)
                    {
                        <strong>@letter</strong>@Html.Raw("&nbsp;|&nbsp;")

                    }
                    else
                    {
                        <a href="?slice=alpha&query=@letter" id="anch_59">@letter</a>@Html.Raw("&nbsp;|&nbsp;")
                    }
                }
            </p>

            if (locationList != null && locationList.Any())
            {
                foreach (RefModeCode location in locationList)
                {
                    string url = "javascript:alert('Location site not found.')";

                    IPublishedContent locationNode = USDA_ARS.Umbraco.Extensions.Helpers.Nodes.GetNodeByModeCode(location.ModeCode);

                    if (locationNode != null)
                    {
                        url = locationNode.Url;
                    }

                    <table span="p">
                        <tbody>
                            <tr>
                                <td valign="top"><img src="/images/incme/bullet.gif" border="0" alt="item"></td>
                                <td valign="top" align="left">
                                    <a href="@url" id="anch_51">@location.WebLabel</a>
                                </td>
                            </tr>
                        </tbody>
                    </table>
                }
            }
        }


    </div>
</div>
