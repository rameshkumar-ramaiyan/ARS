@using Umbraco.Core.Models
@using Umbraco.Core.Services
@using USDA_ARS.Umbraco.Extensions.Models
@using USDA_ARS.Umbraco.Extensions.Models.Aris
@inherits Umbraco.Web.Mvc.UmbracoTemplatePage
@{
    Layout = null;
}<?xml version="1.0" encoding="UTF-8" ?>
@{
    umbraco.library.ChangeContentType("text/xml");
    IPublishedContent currentNode = Model.Content;
    IEnumerable<UsdaArsNews> newsList = USDA_ARS.Umbraco.Extensions.Helpers.News.GetNews(20);

    var siteURL = "http://" + Request.Url.Host.ToString();
}
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <atom:link href="@siteURL/rss" rel="self" type="application/rss+xml" />
        <title>@(currentNode.GetProperty("feedTitle").Value)</title>
        @Html.Raw("<link>")@siteURL@Html.Raw("</link>")
        <description>@(currentNode.GetProperty("feedDescription").Value)</description>
        <pubDate>@String.Format("{0:ddd, dd MMM yyyy HH:mm:ss} EST", DateTime.Parse("1/1/2002"))</pubDate>
        <lastBuildDate>@String.Format("{0:ddd, dd MMM yyyy HH:mm:ss} EST", DateTime.Now)</lastBuildDate>
        <language>en</language>
        <generator>Umbraco</generator>

        @foreach (UsdaArsNews article in newsList)
        {
            <item>
                <title>@(article.SubjectField)</title>
                @Html.Raw("<link>")@(siteURL + "/news/news-item/" + article.NewsID)@Html.Raw("</link>")
                <description>@article.BodyOpener</description>
                <pubDate>@(string.Format("{0:ddd, dd MMM yyyy HH:mm:ss} EST", article.DateField))</pubDate>
                <guid>@(siteURL + "/news/news-item/" + article.NewsID)</guid>
            </item>
        }
    </channel>
</rss>